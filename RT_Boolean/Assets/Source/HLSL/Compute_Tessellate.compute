#pragma kernel CS_Tessellate
#pragma kernel CS_PreprocessMesh

#include "Common.hlsl"

StructuredBuffer<float3> _InputVertices;
StructuredBuffer<float3> _InputNormals;
StructuredBuffer<int> _InputTriangles;
StructuredBuffer<float2> _InputUVs;
StructuredBuffer<float4> _InputTangents;

RWStructuredBuffer<float3> _OutputVertices;
RWStructuredBuffer<float3> _OutputNormals;
RWStructuredBuffer<int> _OutputTriangles;
RWStructuredBuffer<float2> _OutputUVs;
RWStructuredBuffer<float4> _OutputTangents;

int _TriangleCount;
float _MinimumEdgeLength;

void AddTriangle(float3 a_vert, float3 b_vert, float3 c_vert, float3 a_norm, float3 b_norm, float3 c_norm, float4 a_tan, float4 b_tan, float4 c_tan, float2 a_uv, float2 b_uv, float2 c_uv, int index)
{
    _OutputVertices[index] = a_vert;
    _OutputNormals[index] = a_norm;
    _OutputTangents[index] = a_tan;
    _OutputUVs[index] = a_uv;
    _OutputTriangles[index] = index;

    _OutputVertices[index + 1] = b_vert;
    _OutputNormals[index + 1] = b_norm;
    _OutputTangents[index + 1] = b_tan;
    _OutputUVs[index + 1] = b_uv;
    _OutputTriangles[index + 1] = index + 1;

    _OutputVertices[index + 2] = c_vert;
    _OutputNormals[index + 2] = c_norm;
    _OutputTangents[index + 2] = c_tan;
    _OutputUVs[index + 2] = c_uv;
    _OutputTriangles[index + 2] = index + 2;
}


// 我们有 triIndex，它将线程索引乘以3。这很可能是因为一个三角形由三个顶点组成，所以所有操作都是三个一组的。
// 然后我们检查 triIndex 是否大于 _TriangleCount。如果是，我们就立即返回并结束这个线程。这是一个常见的技巧来确保我们不会处理超出我们数据范围的线程。
// 接下来的代码从 _InputTriangles 数组中获取三个索引 a_index，b_index 和 c_index，
// 然后使用这些索引从 _InputVertices，_InputNormals，_InputTangents 和 _InputUVs 中获取数据。
// 最后，我们用这些取得的数据调用了 AddTriangle 函数。
// 总结来说，这段代码的工作原理是取得模型中的每个三角形的顶点、法线、切线和纹理坐标，并传递给 AddTriangle 函数。
// 按照这种方式计算，所有的线程都在同时处理不同的三角形，这在处理大型模型时可以大大提高性能。
[numthreads(64, 1, 1)]
void CS_PreprocessMesh(uint3 id : SV_DispatchThreadID)
{
    int triIndex = id.x * 3;
    
    if (triIndex >= _TriangleCount)
        return;
    
    int a_index = triIndex + 0;
    int b_index = triIndex + 1;
    int c_index = triIndex + 2;

    int a_tri = _InputTriangles[a_index];
    int b_tri = _InputTriangles[b_index];
    int c_tri = _InputTriangles[c_index];

    AddTriangle(
    _InputVertices[a_tri], _InputVertices[b_tri], _InputVertices[c_tri],
    _InputNormals[a_tri], _InputNormals[b_tri], _InputNormals[c_tri], 
    _InputTangents[a_tri], _InputTangents[b_tri], _InputTangents[c_tri], 
    _InputUVs[a_tri], _InputUVs[b_tri], _InputUVs[c_tri],
    a_index);
}

// 这段代码是一个用HLSL编写的计算着色器，它用于对模型进行细分。细分是一种图形处理技术，用来添加更多的多边形（通常是三角形）以提高模型的详细度。
// 以下是这段代码的具体解析：
// 同样是numthreads (64, 1, 1)指定每个线程组的线程布局。
// 对每个三角形的三个顶点（由三个顶点的索引决定）进行操作。
// 对于每一个三角形的顶点，我们首先从输入数组中获取相关的位置、法线、切线和纹理坐标。
// 然后，我们计算这三个顶点之间的距离，并计算出三个中点。
// 我们还计算了这些中点的平均法线和切线。
// 我们同样对UV坐标进行了类似的处理，计算了中点的UV坐标，然后让UV坐标在特定的范围内进行打包和解包操作。
// 然后，代码检查每条边的长度是否小于或等于一个预设的最小边长 _MinimumEdgeLength。如果没有，我们使用 InterpolateSurfacePosition 函数对中点的位置进行插值处理。
// 最后，我们用上述计算出的信息生成四个新的三角形来替代原来的那一个。这四个新三角形分别由原来的一个顶点和两个中点，两个不同的中点和下一个顶点，下一个顶点和剩下的两个中点，以及三个中点组成。 这样的计算处理结果就是原来的每个三角形被切割成了四个较小的三角形，从而实现了模型的细分处理。
// 然后使用 AddTriangle 函数，将新生成的四个三角形添加到输出数组中。
// 综上，这个着色器的目的是执行一种称为 "Loop subdivision" 的过程。这种方法能够增加模型的多边形数量，从而提高模型的细节度。
[numthreads(64, 1, 1)]
void CS_Tessellate(uint3 id : SV_DispatchThreadID)
{
    int triIndex = id.x * 3;
    
    if (triIndex >= _TriangleCount)
        return;
    
    int a_index = triIndex + 0;
    int b_index = triIndex + 1;
    int c_index = triIndex + 2;

    int a_tri = _InputTriangles[a_index];
    int b_tri = _InputTriangles[b_index];
    int c_tri = _InputTriangles[c_index];
    
    float3 original_a_vert = _InputVertices[a_tri];
    float3 original_b_vert = _InputVertices[b_tri];
    float3 original_c_vert = _InputVertices[c_tri];
    
    float length_AB = distance(original_a_vert, original_b_vert);
    float length_BC = distance(original_b_vert, original_c_vert);
    float length_CA = distance(original_c_vert, original_a_vert);
    
    float3 original_a_norm = _InputNormals[a_tri];
    float3 original_b_norm = _InputNormals[b_tri];
    float3 original_c_norm = _InputNormals[c_tri];
    
    float4 original_a_tan = _InputTangents[a_tri];
    float4 original_b_tan = _InputTangents[b_tri];
    float4 original_c_tan = _InputTangents[c_tri];
    
    float2 original_a_uv = _InputUVs[a_tri];
    float2 original_b_uv = _InputUVs[b_tri];
    float2 original_c_uv = _InputUVs[c_tri];
    
    float3 midPointAB = (original_a_vert + original_b_vert) * 0.5;
    float3 midPointBC = (original_b_vert + original_c_vert) * 0.5;
    float3 midPointCA = (original_c_vert + original_a_vert) * 0.5;
    
    float3 midPointAB_norm = normalize(original_a_norm + original_b_norm);
    float3 midPointBC_norm = normalize(original_b_norm + original_c_norm);
    float3 midPointCA_norm = normalize(original_c_norm + original_a_norm);
    
    float4 midPointAB_tan = float4(normalize(original_a_tan.xyz + original_b_tan.xyz), original_a_tan.w);
    float4 midPointBC_tan = float4(normalize(original_b_tan.xyz + original_c_tan.xyz), original_b_tan.w);
    float4 midPointCA_tan = float4(normalize(original_c_tan.xyz + original_a_tan.xyz), original_c_tan.w);
    
    float2 midPointAB_uv = (original_a_uv + original_b_uv) * 0.5;
    float2 midPointBC_uv = (original_b_uv + original_c_uv) * 0.5;
    float2 midPointCA_uv = (original_c_uv + original_a_uv) * 0.5;
    
    float original_a_uv_packed = Pack2In1(original_a_uv, 4096);
    float original_b_uv_packed = Pack2In1(original_b_uv, 4096);
    float original_c_uv_packed = Pack2In1(original_c_uv, 4096);
    float midPointAB_uv_packed = Pack2In1(midPointAB_uv, 4096);
    float midPointBC_uv_packed = Pack2In1(midPointBC_uv, 4096);
    float midPointCA_uv_packed = Pack2In1(midPointCA_uv, 4096);
    
    original_a_uv = Unpack2In1(original_a_uv_packed, 4096);
    original_b_uv = Unpack2In1(original_b_uv_packed, 4096);
    original_c_uv = Unpack2In1(original_c_uv_packed, 4096);
    midPointAB_uv = Unpack2In1(midPointAB_uv_packed, 4096);
    midPointBC_uv = Unpack2In1(midPointBC_uv_packed, 4096);
    midPointCA_uv = Unpack2In1(midPointCA_uv_packed, 4096);
    
    // this is where the magic happens
    midPointAB = length_AB <= _MinimumEdgeLength ? midPointAB : InterpolateSurfacePosition(midPointAB, original_a_vert, original_b_vert, original_c_vert, original_a_norm, original_b_norm, original_c_norm);
    midPointBC = length_BC <= _MinimumEdgeLength ? midPointBC : InterpolateSurfacePosition(midPointBC, original_a_vert, original_b_vert, original_c_vert, original_a_norm, original_b_norm, original_c_norm);
    midPointCA = length_CA <= _MinimumEdgeLength ? midPointCA : InterpolateSurfacePosition(midPointCA, original_a_vert, original_b_vert, original_c_vert, original_a_norm, original_b_norm, original_c_norm);
        
    int index = (_InputTriangles[triIndex + 0] * 4) + 0;
    // tri 1
    {
        float3 v_a = original_a_vert;
        float3 v_b = midPointAB;
        float3 v_c = midPointCA;
        
        float3 n_a = original_a_norm;
        float3 n_b = midPointAB_norm;
        float3 n_c = midPointCA_norm;
                    
        float4 t_a = original_a_tan;
        float4 t_b = midPointAB_tan;
        float4 t_c = midPointCA_tan;
                    
        float2 uv_a = original_a_uv;
        float2 uv_b = midPointAB_uv;
        float2 uv_c = midPointCA_uv;
                    
        AddTriangle(v_a, v_b, v_c, n_a, n_b, n_c, t_a, t_b, t_c, uv_a, uv_b, uv_c, index);
    }
    
    index = (_InputTriangles[triIndex + 0] * 4) + 3;
    // tri 2
    {
        float3 v_a = original_b_vert;
        float3 v_b = midPointBC;
        float3 v_c = midPointAB;

        float3 n_a = original_b_norm;
        float3 n_b = midPointBC_norm;
        float3 n_c = midPointAB_norm;
                    
        float4 t_a = original_b_tan;
        float4 t_b = midPointBC_tan;
        float4 t_c = midPointAB_tan;
                    
        float2 uv_a = original_b_uv;
        float2 uv_b = midPointBC_uv;
        float2 uv_c = midPointAB_uv;
                    
        AddTriangle(v_a, v_b, v_c, n_a, n_b, n_c, t_a, t_b, t_c, uv_a, uv_b, uv_c, index);
    }
    
    index = (_InputTriangles[triIndex + 0] * 4) + 6;
    // tri 3
    {
        float3 v_a = original_c_vert;
        float3 v_b = midPointCA;
        float3 v_c = midPointBC;

        float3 n_a = original_c_norm;
        float3 n_b = midPointCA_norm;
        float3 n_c = midPointBC_norm;
                    
        float4 t_a = original_c_tan;
        float4 t_b = midPointCA_tan;
        float4 t_c = midPointBC_tan;
                    
        float2 uv_a = original_c_uv;
        float2 uv_b = midPointCA_uv;
        float2 uv_c = midPointBC_uv;
                    
        AddTriangle(v_a, v_b, v_c, n_a, n_b, n_c, t_a, t_b, t_c, uv_a, uv_b, uv_c, index);
    }
    
    index = (_InputTriangles[triIndex + 0] * 4) + 9;
    // tri 4
    {
        float3 v_a = midPointAB;
        float3 v_b = midPointBC;
        float3 v_c = midPointCA;

        float3 n_a = midPointAB_norm;
        float3 n_b = midPointBC_norm;
        float3 n_c = midPointCA_norm;
                    
        float4 t_a = midPointAB_tan;
        float4 t_b = midPointBC_tan;
        float4 t_c = midPointCA_tan;
                    
        float2 uv_a = midPointAB_uv;
        float2 uv_b = midPointBC_uv;
        float2 uv_c = midPointCA_uv;
                    
        AddTriangle(v_a, v_b, v_c, n_a, n_b, n_c, t_a, t_b, t_c, uv_a, uv_b, uv_c, index);
    }
}