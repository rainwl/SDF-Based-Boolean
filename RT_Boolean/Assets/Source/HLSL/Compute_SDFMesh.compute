#pragma kernel CS_ComputeMeshBounds
#pragma kernel CS_SampleMeshDistances

#pragma multi_compile _ WRITE_UVS

#include "Common.hlsl"

StructuredBuffer<float3> _InputVertices;
StructuredBuffer<float3> _InputNormals;
StructuredBuffer<float2> _InputUVs;
StructuredBuffer<int> _InputTriangles;

RWStructuredBuffer<int> _BoundsBuffer;
RWStructuredBuffer<float> _Samples;
RWStructuredBuffer<float> _PackedUVs;

#define RAY_ORIGIN_OFFSET float3(0, 0, 0.000001)

float3 _MinBounds;
float3 _MaxBounds;
float _Padding;
uint _Size;
uint _TriangleCount;
uint _VertexCount;
float4x4 _ModelTransformMatrix;

// 这个函数 TexelToPosition 负责将纹理坐标索引（x，y，z)转换为实际的3D位置（xCoord，yCoord，zCoord).
// 以下是整个过程的详细步骤：
// _Size 代表纹理的尺寸 (宽度，长度，或者高度), sizeMinusOne 是纹理尺寸减一的结果，这有助于将尺寸索引归一化到 [0, 1] 的范围。
// 使用 remap 函数为每个坐标（x，y，z）计算实际的3D位置。这个函数做的是对输入值进行线性插值（Lerp）。这里将纹理索引从 [0, sizeMinusOne] 映射到了 [ _MinBounds.x 或 y, _MaxBounds.x 或 y]。 _MinBounds 和 _MaxBounds 应该是一个固定的3D模型的边界。由于纹理索引是整数，所以这个步骤能够将整数坐标映射到实际的浮点数位置。
// 最后，函数返回计算得到的 3D 坐标。
// 简单来说，TexelToPosition 函数接收一个 3D 纹理的 (x, y, z) 索引，然后将其转换为模型空间中的真实位置。
float3 TexelToPosition(int x, int y, int z)
{
    uint sizeMinusOne = _Size - 1;
    float xCoord = remap(0.0, sizeMinusOne, _MinBounds.x, _MaxBounds.x, x);
    float yCoord = remap(0.0, sizeMinusOne, _MinBounds.y, _MaxBounds.y, y);
    float zCoord = remap(0.0, sizeMinusOne, _MinBounds.z, _MaxBounds.z, z);
    return float3(xCoord, yCoord, zCoord);
}


// 这段代码是一个 HLSL（High-Level Shading Language）的计算着色器（Compute shader），通常用来在 GPU 上解决高并行性的问题。
// 从名字（CS_ComputeMeshBounds）来看，这个着色器的目的是计算一个三角形网格模型的包围盒。
// 具体步骤解释如下：
// 计算着色器是以线程组执行的。每个线程组中的线程数由 [numthreads(64, 1, 1)] 属性定义。在本例中，每个线程组包含64个线程。
// 每个线程通过系统值语义 SV_DispatchThreadID 获取其全局线程 ID。
// 更新 _TriangleCount减去2。当 _TriangleCount减去2后的值大于或等于 i（当前线程中的三角形索引）时，我们将有效地逐个处理输入的三角形集。否则，当前线程不处理任何数据同时返回。
// 然后，每个线程从 _InputTriangles 数据中提取三个索引，这些索引将用于从 _InputVertices 中获取对应的三维顶点。这些顶点位置经过模型变换矩阵 _ModelTransformMatrix 的变换后确定其在世界坐标下的位置。
// 设置 packingMultiplier为1000，这是将浮点值转换为整数以进行比较的过程中的乘法因子。
// 对于三角形的每个轴（X、Y 和 Z 轴）计算最小和最大值，这样可以找出包含这个三角形的最小包围盒。
// 计算的最小和最大轴值将被乘以 packingMultiplier 转化为整数，然后通过 InterlockedMin 和 InterlockedMax 函数分别更新 _BoundsBuffer 中的最小和最大界限。这使用了原子操作，只有一个线程可以在任何一次进行此操作，这对于并行运算的环境是必要的，以防止数据竞争。
// 最后，结果是一个包含 3D 模型包围盒最小和最大界限的 _BoundsBuffer，所以可以确定模型在世界坐标空间中的大小和位置。
[numthreads(64, 1, 1)]
void CS_ComputeMeshBounds(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x * 3;
    
    if (i >= (_TriangleCount - 2))
        return;
    
    int index_a = _InputTriangles[i];
    int index_b = _InputTriangles[i + 1];
    int index_c = _InputTriangles[i + 2];
        
    float3 a = mul(_ModelTransformMatrix, float4(_InputVertices[index_a], 1.0)).xyz;
    float3 b = mul(_ModelTransformMatrix, float4(_InputVertices[index_b], 1.0)).xyz;
    float3 c = mul(_ModelTransformMatrix, float4(_InputVertices[index_c], 1.0)).xyz;

    const int packingMultiplier = 1000;
    
    float minX = min(min(a.x, b.x), c.x);
    float minY = min(min(a.y, b.y), c.y);
    float minZ = min(min(a.z, b.z), c.z);

    float maxX = max(max(a.x, b.x), c.x);
    float maxY = max(max(a.y, b.y), c.y);
    float maxZ = max(max(a.z, b.z), c.z);
    
    int minX_packed = minX * packingMultiplier;
    int minY_packed = minY * packingMultiplier;
    int minZ_packed = minZ * packingMultiplier;
    
    int maxX_packed = maxX * packingMultiplier;
    int maxY_packed = maxY * packingMultiplier;
    int maxZ_packed = maxZ * packingMultiplier;
    
    InterlockedMin(_BoundsBuffer[0], minX_packed);
    InterlockedMin(_BoundsBuffer[1], minY_packed);
    InterlockedMin(_BoundsBuffer[2], minZ_packed);
    
    InterlockedMax(_BoundsBuffer[3], maxX_packed);
    InterlockedMax(_BoundsBuffer[4], maxY_packed);
    InterlockedMax(_BoundsBuffer[5], maxZ_packed);
}

// 这是一段使用HLSL高级渲染语言所写的，并在GPU上执行的计算着色器（Compute Shader）的代码。该计算着色器被分配给每一个纹理元素或网格元素，并根据一些算法来处理该元素。
// 计算着色器在处理具有特定id的纹理元素时，先定义纹理元素在三维空间中的位置(x,y,z)，然后检查这些坐标是否在预设的大小范围_Size内。如果超出，则直接返回不进行后续处理。
// 接着，该函数将纹理坐标转换为物体空间的位置，做这件事的函数是 TexelToPosition(x, y, z)。
// 然后，为了计算从物体空间的位置到每个三角形的最近距离，函数遍历输入的所有三角形。在这个过程中，它首先获取构成每个三角形的三个顶点index_a, index_b, index_c，并将它们从模型空间变换到世界空间。
// 之后，采用RayIntersectsTriangle函数检查从物体空间的位置射出的光线是否与当前三角形相交。该函数返回一个布尔值以及一个交点。
// 然后通过检查光线是否与三角形相交，判断点是否在该模型内部（通过 isInside *= (intersectsTriangle ? -1.0 : 1.0); 记录光线穿过三角形的次数，奇数次代表在内部，偶数次代表在外部）。
// 接着计算物体空间的位置到当前三角形的最小距离dist，并在所有三角形中找到最小的距离。
// 然后，根据选择的最佳三角形（具有最小距离的三角形），获取相关UV坐标和顶点坐标。
// 然后更新距离，如果点位于模型内部，则返回负距离。
// 计算出纹理在一维纹理（_Samples)中对应的索引，并将最小距离值存储在一维纹理数组中对应的位置。
// 最后，如果定义了 WRITE_UVS， 那么它还会计算出纹理的UV坐标，并将这些UV坐标存储在一个更大的一维纹理（_PackedUVs）中。此坐标是通过三角形的巴里坐标插值计算得出的。
// 总的来说，这个计算着色器的主要功能是计算每个纹理元素或者网格元素与模型表面的最近距离，并根据这个距离，在纹理或高度图中修改相应像素的颜色或值。
[numthreads(8, 8, 8)]
void CS_SampleMeshDistances(uint3 id : SV_DispatchThreadID)
{
    // each thread represents a single texel
    uint x = id.x;
    uint y = id.y;
    uint z = id.z;
    
    if (x >= _Size || y >= _Size || z >= _Size)
        return;
    
    // convert the texture coordinate to an object space position
    float3 p = TexelToPosition(x, y, z);
    
    float minDistance = 100.0;
    int isInside = 1;
    
    int bestIndex = 0;
        
    for (uint i = 0; i < _TriangleCount; i += 3)
    {
        int index_a = _InputTriangles[i];
        int index_b = _InputTriangles[i + 1];
        int index_c = _InputTriangles[i + 2];
        
        float3 a = mul(_ModelTransformMatrix, float4(_InputVertices[index_a], 1.0)).xyz;
        float3 b = mul(_ModelTransformMatrix, float4(_InputVertices[index_b], 1.0)).xyz;
        float3 c = mul(_ModelTransformMatrix, float4(_InputVertices[index_c], 1.0)).xyz;
        
        float3 intersection;
        
        // adding a tiny offset to the ray origin (perpendicular to the ray direction) helps prevent
        // cases where the ray is perfectly aligned with a mesh edge. of course, this isn't a perfect solution,
        // but mesh edges seem to be much more likely to appear when we partition space into an even grid like this
        bool intersectsTriangle = RayIntersectsTriangle(p + RAY_ORIGIN_OFFSET, RIGHT, a, b, c, intersection);
        
        isInside *= (intersectsTriangle ? -1.0 : 1.0);
        
        float dist = DistanceToTriangle(p, a, b, c);
        
        if (dist < minDistance)
        {
            minDistance = dist;
            bestIndex = i;
        }
    }
    
    int index_a = _InputTriangles[bestIndex];
    int index_b = _InputTriangles[bestIndex + 1];
    int index_c = _InputTriangles[bestIndex + 2];
    
    float2 a_uv = _InputUVs[index_a];
    float2 b_uv = _InputUVs[index_b];
    float2 c_uv = _InputUVs[index_c];
    
    float3 a_vert = mul(_ModelTransformMatrix, float4(_InputVertices[index_a], 1.0)).xyz;
    float3 b_vert = mul(_ModelTransformMatrix, float4(_InputVertices[index_b], 1.0)).xyz;
    float3 c_vert = mul(_ModelTransformMatrix, float4(_InputVertices[index_c], 1.0)).xyz;
    
    minDistance *= isInside;
    
    int index_1d = id.x + id.y * _Size + id.z * _Size * _Size;
    _Samples[index_1d] = minDistance;
    
#ifdef WRITE_UVS
    float3 triNorm = normalize(cross((b_vert - a_vert), (c_vert - a_vert)));
    float3 projectedP = p - (triNorm * dot(p, triNorm));
    
    _PackedUVs[index_1d] = Pack2In1(BarycentricInterpolation(projectedP, a_vert, b_vert, c_vert, a_uv, b_uv, c_uv));
#endif
}